package DynamicPrograming;

public class Logest_Common_Subseqence {
	
	int matrix[][];
	
	public Logest_Common_Subseqence(int n,int m) {
		matrix=new int[n+1][m+1];
		for(int i=0;i<=n;i++) {
			for(int j=0;j<=m;j++) {
				matrix[i][j]=-1;
			}
		}
	}
	public int max(int a,int b) {
		if(a>b) {
			return a;
		}
		else {
			return b;
		}
	}
	public int LCS(String str1,String str2,int n,int m) {
		
		
		if(n==0 || m==0) {
			return 0;
		}
		if(matrix[n][m]!=-1) {
			return matrix[n][m];
		}
		if(str1.charAt(n-1) ==str2.charAt(m-1)) {
			matrix[n][m]=1+LCS(str1,str2,n-1,m-1);
			return matrix[n][m];
		}
		else {
			matrix[n][m]=max(LCS(str1,str2,n,m-1),LCS(str1,str2,n-1,m));
			return matrix[n][m];
		}
	}
	public static void main(String []args) {
		String x="abcdgh";
		String y="abfdfha";
		Logest_Common_Subseqence obj=new Logest_Common_Subseqence(x.length(),y.length());
		System.out.println(obj.LCS(x,y,x.length(),y.length()));
	}
}
