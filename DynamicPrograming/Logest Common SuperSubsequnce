package DynamicPrograming;

public class Print_LCSS {
int matrix[][];
	
	public Print_LCSS(int n,int m) {
		matrix=new int[n+1][m+1];
		for(int i=0;i<=n;i++) {
			for(int j=0;j<=m;j++) {
				matrix[i][j]=-1;
			}
		}
	}
	public int max(int a,int b) {
		if(a>b) {
			return a;
		}
		else {
			return b;
		}
	}
	public String LCS(String str1,String str2,int n,int m) {
		
		for(int i=0;i<=n;i++) {
			for(int j=0;j<=m;j++) {
				
				if(i==0 || j==0) {
					this.matrix[i][j]=0;
				}
			}
		}
		for(int i=1;i<=n;i++) {
			for(int j=1;j<=m;j++) {
				
				if(str1.charAt(i-1)==str2.charAt(j-1)) {
					this.matrix[i][j]=1+this.matrix[i-1][j-1];
				}
				else {
					this.matrix[i][j]=max(matrix[i][j-1],matrix[i-1][j]);
				}
			}
		}
		String temp="";
		int i=n;
		int j=m;
		while(i>0 && j>0) {
			if(str1.charAt(i-1)==str2.charAt(j-1)) {
				temp=temp+str1.charAt(i-1);
				i=i-1;
				j=j-1;
			}
			else {
				
				if(matrix[i][j-1]>=matrix[i-1][j]) {
					temp=temp+str2.charAt(j-1);
					j=j-1;
				}
				else {
					temp=temp+str1.charAt(i-1);
					i=i-1;
				}
			}
		}
		while(i>0) {
			temp=temp+str1.charAt(i-1);
			i--;
		}
		while(j>0) {
			temp=temp+str2.charAt(j-1);
			j--;
		}
		StringBuffer s=new StringBuffer(temp);
		return s.reverse().toString();
	}
	public static void main(String []args) {
		String x="acbcf";
		String y="abcdaf";
		Print_LCSS obj=new Print_LCSS(x.length(),y.length());
		System.out.println(obj.LCS(x,y,x.length(),y.length()));
	}

}
